/*
 * Visier Object Configuration APIs
 * Visier APIs for managing objects in studio experience
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AnalyticObjectFilterDTO;
import com.konfigthis.client.model.CalculationConceptConfigurationMapDTO;
import com.konfigthis.client.model.CalculationConceptDTO;
import com.konfigthis.client.model.CalculationConceptListDTO;
import com.konfigthis.client.model.ConceptConfigurationResultDTO;
import com.konfigthis.client.model.PerspectiveConfigurationDTO;
import com.konfigthis.client.model.SelectionConceptConfigurationMapDTO;
import com.konfigthis.client.model.SelectionConceptDTO;
import com.konfigthis.client.model.SelectionConceptListDTO;
import com.konfigthis.client.model.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectConfigurationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectConfigurationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectConfigurationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCalculationConceptCall(String conceptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/calculation-concepts/{conceptId}"
            .replace("{" + "conceptId" + "}", localVarApiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalculationConceptValidateBeforeCall(String conceptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling getCalculationConcept(Async)");
        }

        return getCalculationConceptCall(conceptId, _callback);

    }


    private ApiResponse<CalculationConceptDTO> getCalculationConceptWithHttpInfo(String conceptId) throws ApiException {
        okhttp3.Call localVarCall = getCalculationConceptValidateBeforeCall(conceptId, null);
        Type localVarReturnType = new TypeToken<CalculationConceptDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCalculationConceptAsync(String conceptId, final ApiCallback<CalculationConceptDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalculationConceptValidateBeforeCall(conceptId, _callback);
        Type localVarReturnType = new TypeToken<CalculationConceptDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCalculationConceptRequestBuilder {
        private final String conceptId;

        private GetCalculationConceptRequestBuilder(String conceptId) {
            this.conceptId = conceptId;
        }

        /**
         * Build call for getCalculationConcept
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCalculationConceptCall(conceptId, _callback);
        }


        /**
         * Execute getCalculationConcept request
         * @return CalculationConceptDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public CalculationConceptDTO execute() throws ApiException {
            ApiResponse<CalculationConceptDTO> localVarResp = getCalculationConceptWithHttpInfo(conceptId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCalculationConcept request with HTTP info returned
         * @return ApiResponse&lt;CalculationConceptDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalculationConceptDTO> executeWithHttpInfo() throws ApiException {
            return getCalculationConceptWithHttpInfo(conceptId);
        }

        /**
         * Execute getCalculationConcept request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalculationConceptDTO> _callback) throws ApiException {
            return getCalculationConceptAsync(conceptId, _callback);
        }
    }

    /**
     * Retrieve the configuration of a calculation concept
     * This API allows you to retrieve the configuration details of a calculation concept in production.
     * @param conceptId The ID of the concept to retrieve the configuration for. (required)
     * @return GetCalculationConceptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetCalculationConceptRequestBuilder getCalculationConcept(String conceptId) throws IllegalArgumentException {
        if (conceptId == null) throw new IllegalArgumentException("\"conceptId\" is required but got null");
            

        return new GetCalculationConceptRequestBuilder(conceptId);
    }
    private okhttp3.Call getCalculationConceptsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/calculation-concepts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalculationConceptsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCalculationConceptsCall(_callback);

    }


    private ApiResponse<CalculationConceptListDTO> getCalculationConceptsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCalculationConceptsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CalculationConceptListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCalculationConceptsAsync(final ApiCallback<CalculationConceptListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalculationConceptsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CalculationConceptListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCalculationConceptsRequestBuilder {

        private GetCalculationConceptsRequestBuilder() {
        }

        /**
         * Build call for getCalculationConcepts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCalculationConceptsCall(_callback);
        }


        /**
         * Execute getCalculationConcepts request
         * @return CalculationConceptListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public CalculationConceptListDTO execute() throws ApiException {
            ApiResponse<CalculationConceptListDTO> localVarResp = getCalculationConceptsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCalculationConcepts request with HTTP info returned
         * @return ApiResponse&lt;CalculationConceptListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalculationConceptListDTO> executeWithHttpInfo() throws ApiException {
            return getCalculationConceptsWithHttpInfo();
        }

        /**
         * Execute getCalculationConcepts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalculationConceptListDTO> _callback) throws ApiException {
            return getCalculationConceptsAsync(_callback);
        }
    }

    /**
     * Retrieve all calculation concepts
     * This API allows you to retrieve the calculation concepts available in production.
     * @return GetCalculationConceptsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetCalculationConceptsRequestBuilder getCalculationConcepts() throws IllegalArgumentException {
        return new GetCalculationConceptsRequestBuilder();
    }
    private okhttp3.Call getSelectionConceptCall(String conceptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/selection-concepts/{conceptId}"
            .replace("{" + "conceptId" + "}", localVarApiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelectionConceptValidateBeforeCall(String conceptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling getSelectionConcept(Async)");
        }

        return getSelectionConceptCall(conceptId, _callback);

    }


    private ApiResponse<SelectionConceptDTO> getSelectionConceptWithHttpInfo(String conceptId) throws ApiException {
        okhttp3.Call localVarCall = getSelectionConceptValidateBeforeCall(conceptId, null);
        Type localVarReturnType = new TypeToken<SelectionConceptDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSelectionConceptAsync(String conceptId, final ApiCallback<SelectionConceptDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelectionConceptValidateBeforeCall(conceptId, _callback);
        Type localVarReturnType = new TypeToken<SelectionConceptDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSelectionConceptRequestBuilder {
        private final String conceptId;

        private GetSelectionConceptRequestBuilder(String conceptId) {
            this.conceptId = conceptId;
        }

        /**
         * Build call for getSelectionConcept
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSelectionConceptCall(conceptId, _callback);
        }


        /**
         * Execute getSelectionConcept request
         * @return SelectionConceptDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public SelectionConceptDTO execute() throws ApiException {
            ApiResponse<SelectionConceptDTO> localVarResp = getSelectionConceptWithHttpInfo(conceptId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSelectionConcept request with HTTP info returned
         * @return ApiResponse&lt;SelectionConceptDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SelectionConceptDTO> executeWithHttpInfo() throws ApiException {
            return getSelectionConceptWithHttpInfo(conceptId);
        }

        /**
         * Execute getSelectionConcept request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SelectionConceptDTO> _callback) throws ApiException {
            return getSelectionConceptAsync(conceptId, _callback);
        }
    }

    /**
     * Retrieve the configuration of a selection concept
     * This API allows you to retrieve the configuration details of a selection concept in production.
     * @param conceptId The ID of the concept to retrieve the configuration for. (required)
     * @return GetSelectionConceptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetSelectionConceptRequestBuilder getSelectionConcept(String conceptId) throws IllegalArgumentException {
        if (conceptId == null) throw new IllegalArgumentException("\"conceptId\" is required but got null");
            

        return new GetSelectionConceptRequestBuilder(conceptId);
    }
    private okhttp3.Call getSelectionConceptsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/selection-concepts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelectionConceptsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelectionConceptsCall(_callback);

    }


    private ApiResponse<SelectionConceptListDTO> getSelectionConceptsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelectionConceptsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SelectionConceptListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSelectionConceptsAsync(final ApiCallback<SelectionConceptListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelectionConceptsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SelectionConceptListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSelectionConceptsRequestBuilder {

        private GetSelectionConceptsRequestBuilder() {
        }

        /**
         * Build call for getSelectionConcepts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSelectionConceptsCall(_callback);
        }


        /**
         * Execute getSelectionConcepts request
         * @return SelectionConceptListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public SelectionConceptListDTO execute() throws ApiException {
            ApiResponse<SelectionConceptListDTO> localVarResp = getSelectionConceptsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSelectionConcepts request with HTTP info returned
         * @return ApiResponse&lt;SelectionConceptListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SelectionConceptListDTO> executeWithHttpInfo() throws ApiException {
            return getSelectionConceptsWithHttpInfo();
        }

        /**
         * Execute getSelectionConcepts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SelectionConceptListDTO> _callback) throws ApiException {
            return getSelectionConceptsAsync(_callback);
        }
    }

    /**
     * Retrieve all selection concepts
     * This API allows you to retrieve the selection concepts available in production.
     * @return GetSelectionConceptsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetSelectionConceptsRequestBuilder getSelectionConcepts() throws IllegalArgumentException {
        return new GetSelectionConceptsRequestBuilder();
    }
    private okhttp3.Call mapCalculationConceptCall(String conceptId, CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calculationConceptConfigurationMapDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/calculation-concepts/{conceptId}/configure"
            .replace("{" + "conceptId" + "}", localVarApiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapCalculationConceptValidateBeforeCall(String conceptId, CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling mapCalculationConcept(Async)");
        }

        // verify the required parameter 'calculationConceptConfigurationMapDTO' is set
        if (calculationConceptConfigurationMapDTO == null) {
            throw new ApiException("Missing the required parameter 'calculationConceptConfigurationMapDTO' when calling mapCalculationConcept(Async)");
        }

        return mapCalculationConceptCall(conceptId, calculationConceptConfigurationMapDTO, _callback);

    }


    private ApiResponse<ConceptConfigurationResultDTO> mapCalculationConceptWithHttpInfo(String conceptId, CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO) throws ApiException {
        okhttp3.Call localVarCall = mapCalculationConceptValidateBeforeCall(conceptId, calculationConceptConfigurationMapDTO, null);
        Type localVarReturnType = new TypeToken<ConceptConfigurationResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call mapCalculationConceptAsync(String conceptId, CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO, final ApiCallback<ConceptConfigurationResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapCalculationConceptValidateBeforeCall(conceptId, calculationConceptConfigurationMapDTO, _callback);
        Type localVarReturnType = new TypeToken<ConceptConfigurationResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MapCalculationConceptRequestBuilder {
        private final String conceptId;
        private List<PerspectiveConfigurationDTO> perspectivesToMap;

        private MapCalculationConceptRequestBuilder(String conceptId) {
            this.conceptId = conceptId;
        }

        /**
         * Set perspectivesToMap
         * @param perspectivesToMap A list of objects representing the list of perspectives in the calculation concept. (optional)
         * @return MapCalculationConceptRequestBuilder
         */
        public MapCalculationConceptRequestBuilder perspectivesToMap(List<PerspectiveConfigurationDTO> perspectivesToMap) {
            this.perspectivesToMap = perspectivesToMap;
            return this;
        }
        
        /**
         * Build call for mapCalculationConcept
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO = buildBodyParams();
            return mapCalculationConceptCall(conceptId, calculationConceptConfigurationMapDTO, _callback);
        }

        private CalculationConceptConfigurationMapDTO buildBodyParams() {
            CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO = new CalculationConceptConfigurationMapDTO();
            calculationConceptConfigurationMapDTO.perspectivesToMap(this.perspectivesToMap);
            return calculationConceptConfigurationMapDTO;
        }

        /**
         * Execute mapCalculationConcept request
         * @return ConceptConfigurationResultDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConceptConfigurationResultDTO execute() throws ApiException {
            CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO = buildBodyParams();
            ApiResponse<ConceptConfigurationResultDTO> localVarResp = mapCalculationConceptWithHttpInfo(conceptId, calculationConceptConfigurationMapDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute mapCalculationConcept request with HTTP info returned
         * @return ApiResponse&lt;ConceptConfigurationResultDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConceptConfigurationResultDTO> executeWithHttpInfo() throws ApiException {
            CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO = buildBodyParams();
            return mapCalculationConceptWithHttpInfo(conceptId, calculationConceptConfigurationMapDTO);
        }

        /**
         * Execute mapCalculationConcept request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConceptConfigurationResultDTO> _callback) throws ApiException {
            CalculationConceptConfigurationMapDTO calculationConceptConfigurationMapDTO = buildBodyParams();
            return mapCalculationConceptAsync(conceptId, calculationConceptConfigurationMapDTO, _callback);
        }
    }

    /**
     * Map dimension members to nodes in a calculation concept
     * This API allows you to map dimension members to nodes in a calculation concept.  The changes are applied in a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
     * @param conceptId The UUID of the concept to configure. (required)
     * @param calculationConceptConfigurationMapDTO  (required)
     * @return MapCalculationConceptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public MapCalculationConceptRequestBuilder mapCalculationConcept(String conceptId) throws IllegalArgumentException {
        if (conceptId == null) throw new IllegalArgumentException("\"conceptId\" is required but got null");
            

        return new MapCalculationConceptRequestBuilder(conceptId);
    }
    private okhttp3.Call mapSelectionConceptCall(String conceptId, SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectionConceptConfigurationMapDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/selection-concepts/{conceptId}/configure"
            .replace("{" + "conceptId" + "}", localVarApiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapSelectionConceptValidateBeforeCall(String conceptId, SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling mapSelectionConcept(Async)");
        }

        // verify the required parameter 'selectionConceptConfigurationMapDTO' is set
        if (selectionConceptConfigurationMapDTO == null) {
            throw new ApiException("Missing the required parameter 'selectionConceptConfigurationMapDTO' when calling mapSelectionConcept(Async)");
        }

        return mapSelectionConceptCall(conceptId, selectionConceptConfigurationMapDTO, _callback);

    }


    private ApiResponse<ConceptConfigurationResultDTO> mapSelectionConceptWithHttpInfo(String conceptId, SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO) throws ApiException {
        okhttp3.Call localVarCall = mapSelectionConceptValidateBeforeCall(conceptId, selectionConceptConfigurationMapDTO, null);
        Type localVarReturnType = new TypeToken<ConceptConfigurationResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call mapSelectionConceptAsync(String conceptId, SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO, final ApiCallback<ConceptConfigurationResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapSelectionConceptValidateBeforeCall(conceptId, selectionConceptConfigurationMapDTO, _callback);
        Type localVarReturnType = new TypeToken<ConceptConfigurationResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MapSelectionConceptRequestBuilder {
        private final String conceptId;
        private List<AnalyticObjectFilterDTO> analyticObjectFiltersToMap;

        private MapSelectionConceptRequestBuilder(String conceptId) {
            this.conceptId = conceptId;
        }

        /**
         * Set analyticObjectFiltersToMap
         * @param analyticObjectFiltersToMap A list of analytic object filters indicating the analytic object and dimension members used  for the selection concept.   Note: If this array is empty, all filters will be removed for the concept. (optional)
         * @return MapSelectionConceptRequestBuilder
         */
        public MapSelectionConceptRequestBuilder analyticObjectFiltersToMap(List<AnalyticObjectFilterDTO> analyticObjectFiltersToMap) {
            this.analyticObjectFiltersToMap = analyticObjectFiltersToMap;
            return this;
        }
        
        /**
         * Build call for mapSelectionConcept
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO = buildBodyParams();
            return mapSelectionConceptCall(conceptId, selectionConceptConfigurationMapDTO, _callback);
        }

        private SelectionConceptConfigurationMapDTO buildBodyParams() {
            SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO = new SelectionConceptConfigurationMapDTO();
            selectionConceptConfigurationMapDTO.analyticObjectFiltersToMap(this.analyticObjectFiltersToMap);
            return selectionConceptConfigurationMapDTO;
        }

        /**
         * Execute mapSelectionConcept request
         * @return ConceptConfigurationResultDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ConceptConfigurationResultDTO execute() throws ApiException {
            SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO = buildBodyParams();
            ApiResponse<ConceptConfigurationResultDTO> localVarResp = mapSelectionConceptWithHttpInfo(conceptId, selectionConceptConfigurationMapDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute mapSelectionConcept request with HTTP info returned
         * @return ApiResponse&lt;ConceptConfigurationResultDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConceptConfigurationResultDTO> executeWithHttpInfo() throws ApiException {
            SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO = buildBodyParams();
            return mapSelectionConceptWithHttpInfo(conceptId, selectionConceptConfigurationMapDTO);
        }

        /**
         * Execute mapSelectionConcept request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConceptConfigurationResultDTO> _callback) throws ApiException {
            SelectionConceptConfigurationMapDTO selectionConceptConfigurationMapDTO = buildBodyParams();
            return mapSelectionConceptAsync(conceptId, selectionConceptConfigurationMapDTO, _callback);
        }
    }

    /**
     * Map dimension members to a selection concept
     * This API allows you to map dimension members to a selection concept.  The changes are applied to a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
     * @param conceptId The UUID of the concept to configure. (required)
     * @param selectionConceptConfigurationMapDTO  (required)
     * @return MapSelectionConceptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public MapSelectionConceptRequestBuilder mapSelectionConcept(String conceptId) throws IllegalArgumentException {
        if (conceptId == null) throw new IllegalArgumentException("\"conceptId\" is required but got null");
            

        return new MapSelectionConceptRequestBuilder(conceptId);
    }
}
