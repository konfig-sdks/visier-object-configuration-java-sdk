/*
 * Visier Object Configuration APIs
 * Visier APIs for managing objects in studio experience
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AnalyticObjectFilterDTO;
import com.konfigthis.client.model.CalculationConceptConfigurationMapDTO;
import com.konfigthis.client.model.CalculationConceptDTO;
import com.konfigthis.client.model.CalculationConceptListDTO;
import com.konfigthis.client.model.ConceptConfigurationResultDTO;
import com.konfigthis.client.model.PerspectiveConfigurationDTO;
import com.konfigthis.client.model.SelectionConceptConfigurationMapDTO;
import com.konfigthis.client.model.SelectionConceptDTO;
import com.konfigthis.client.model.SelectionConceptListDTO;
import com.konfigthis.client.model.Status;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObjectConfigurationApi
 */
@Disabled
public class ObjectConfigurationApiTest {

    private static ObjectConfigurationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ObjectConfigurationApi(apiClient);
    }

    /**
     * Retrieve the configuration of a calculation concept
     *
     * This API allows you to retrieve the configuration details of a calculation concept in production.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalculationConceptTest() throws ApiException {
        String conceptId = null;
        CalculationConceptDTO response = api.getCalculationConcept(conceptId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve all calculation concepts
     *
     * This API allows you to retrieve the calculation concepts available in production.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalculationConceptsTest() throws ApiException {
        CalculationConceptListDTO response = api.getCalculationConcepts()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the configuration of a selection concept
     *
     * This API allows you to retrieve the configuration details of a selection concept in production.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectionConceptTest() throws ApiException {
        String conceptId = null;
        SelectionConceptDTO response = api.getSelectionConcept(conceptId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve all selection concepts
     *
     * This API allows you to retrieve the selection concepts available in production.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectionConceptsTest() throws ApiException {
        SelectionConceptListDTO response = api.getSelectionConcepts()
                .execute();
        // TODO: test validations
    }

    /**
     * Map dimension members to nodes in a calculation concept
     *
     * This API allows you to map dimension members to nodes in a calculation concept.  The changes are applied in a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mapCalculationConceptTest() throws ApiException {
        String conceptId = null;
        List<PerspectiveConfigurationDTO> perspectivesToMap = null;
        ConceptConfigurationResultDTO response = api.mapCalculationConcept(conceptId)
                .perspectivesToMap(perspectivesToMap)
                .execute();
        // TODO: test validations
    }

    /**
     * Map dimension members to a selection concept
     *
     * This API allows you to map dimension members to a selection concept.  The changes are applied to a new project and published to production.   The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in  the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mapSelectionConceptTest() throws ApiException {
        String conceptId = null;
        List<AnalyticObjectFilterDTO> analyticObjectFiltersToMap = null;
        ConceptConfigurationResultDTO response = api.mapSelectionConcept(conceptId)
                .analyticObjectFiltersToMap(analyticObjectFiltersToMap)
                .execute();
        // TODO: test validations
    }

}
